{"version":3,"file":"index.mjs","sources":["../lib/primitive.js","../lib/object.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a non positive finite value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is non positive finite\n*\n* @example\n* var bool = isNonPositiveFinite( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveFinite( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isNonPositiveFinite( value ) {\n\treturn ( isNumber( value ) && value <=0 && value !== NINF );\n}\n\n\n// EXPORTS //\n\nexport default isNonPositiveFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\nimport { isObject as isNumber } from '@stdlib/assert-is-number';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a non positive finite value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is non positive finite\n*\n* @example\n* var bool = isNonPositiveFinite( -3.0 );\n* // returns false\n*\n* @example\n* var bool = isNonPositiveFinite( new Number( -3.0 ) );\n* // returns true\n*/\nfunction isNonPositiveFinite( value ) {\n\treturn (\n\t\tisNumber( value ) && value.valueOf() <=0 && value.valueOf() !== NINF);\n}\n\n\n// EXPORTS //\n\nexport default isNonPositiveFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-unused-vars */\n'use strict';\n\n// MODULES //\n\nimport NINF from '@stdlib/constants-float64-ninf';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\n/**\n* Tests if a value is a nonpositive finite number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is non positive finite\n*\n* @example\n* var bool = isNonPositiveFinite( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveFinite( new Number( -3.0 ) );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveFinite( -Infinity );\n* // returns false\n*/\nfunction isNonPositiveFinite( value ) {\n\treturn (\n\t\tisPrimitive(value) || isObject(value));\n}\n\n\n// EXPORTS //\n\nexport default isNonPositiveFinite;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a nonpositive finite number.\n*\n* @module @stdlib/assert-is-nonpositive-finite\n*\n* @example\n* import isNonPositiveFinite from '@stdlib/assert-is-nonpositive-finite';\n*\n* var bool = isNonPositiveFinite( -2 );\n* // returns true\n*\n* bool = isNonPositiveFinite( 3 );\n* // returns false\n*\n* bool = isNonPositiveFinite( 'beep' );\n* // returns false\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport isPrimitive from './primitive.js';\nimport isObject from './object.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["isNonPositiveFinite","value","isNumber","NINF","valueOf","isPrimitive","isObject","setReadOnly","main"],"mappings":";;iVA0CA,SAASA,EAAqBC,GAC7B,OAASC,EAAUD,IAAWA,GAAQ,GAAKA,IAAUE,CACtD,CCFA,SAASH,EAAqBC,GAC7B,OACCC,EAAUD,IAAWA,EAAMG,WAAY,GAAKH,EAAMG,YAAcD,CAClE,CCGA,SAASH,EAAqBC,GAC7B,OACCI,EAAYJ,IAAUK,EAASL,EACjC,CCHAM,EAAAC,EAAA,cAAAH,GACAE,EAAAC,EAAA,WAAAF"}