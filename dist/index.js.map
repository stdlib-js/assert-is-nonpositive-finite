{
  "version": 3,
  "sources": ["../lib/primitive.js", "../lib/object.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number primitive having a non positive finite value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is non positive finite\n*\n* @example\n* var bool = isNonPositiveFinite( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveFinite( new Number( -3.0 ) );\n* // returns false\n*/\nfunction isNonPositiveFinite( value ) {\n\treturn ( isNumber( value ) && value <=0 && value !== NINF );\n}\n\n\n// EXPORTS //\n\nmodule.exports = isNonPositiveFinite;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar NINF = require( '@stdlib/constants-float64-ninf' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isObject;\n\n\n// MAIN //\n\n/**\n* Tests if a value is a number object having a non positive finite value.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is non positive finite\n*\n* @example\n* var bool = isNonPositiveFinite( -3.0 );\n* // returns false\n*\n* @example\n* var bool = isNonPositiveFinite( new Number( -3.0 ) );\n* // returns true\n*/\nfunction isNonPositiveFinite( value ) {\n\treturn (\n\t\tisNumber( value ) && value.valueOf() <=0 && value.valueOf() !== NINF);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isNonPositiveFinite;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-unused-vars */\n'use strict';\n\n// MODULES //\n\nvar NINF = require('@stdlib/constants-float64-ninf');\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a nonpositive finite number.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating if a value is non positive finite\n*\n* @example\n* var bool = isNonPositiveFinite( -3.0 );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveFinite( new Number( -3.0 ) );\n* // returns true\n*\n* @example\n* var bool = isNonPositiveFinite( -Infinity );\n* // returns false\n*/\nfunction isNonPositiveFinite( value ) {\n\treturn (\n\t\tisPrimitive(value) || isObject(value));\n}\n\n\n// EXPORTS //\n\nmodule.exports = isNonPositiveFinite;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a nonpositive finite number.\n*\n* @module @stdlib/assert-is-nonpositive-finite\n*\n* @example\n* var isNonPositiveFinite = require( '@stdlib/assert-is-nonpositive-finite' );\n*\n* var bool = isNonPositiveFinite( -2 );\n* // returns true\n*\n* bool = isNonPositiveFinite( 3 );\n* // returns false\n*\n* bool = isNonPositiveFinite( 'beep' );\n* // returns false\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar isPrimitive = require( './primitive.js' );\nvar isObject = require( './object.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'isPrimitive', isPrimitive );\nsetReadOnly( main, 'isObject', isObject );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,gCAAiC,EACjDC,EAAW,QAAS,0BAA2B,EAAE,YAmBrD,SAASC,EAAqBC,EAAQ,CACrC,OAASF,EAAUE,CAAM,GAAKA,GAAQ,GAAKA,IAAUH,CACtD,CAKAD,EAAO,QAAUG,ICjDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAO,QAAS,gCAAiC,EACjDC,EAAW,QAAS,0BAA2B,EAAE,SAmBrD,SAASC,EAAqBC,EAAQ,CACrC,OACCF,EAAUE,CAAM,GAAKA,EAAM,QAAQ,GAAI,GAAKA,EAAM,QAAQ,IAAMH,CAClE,CAKAD,EAAO,QAAUG,IClDjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAuBA,IAAIC,EAAO,QAAQ,gCAAgC,EAC/CC,EAAc,IACdC,EAAW,IAuBf,SAASC,EAAqBC,EAAQ,CACrC,OACCH,EAAYG,CAAK,GAAKF,EAASE,CAAK,CACtC,CAKAL,EAAO,QAAUI,IChBjB,IAAIE,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAc,IACdC,EAAW,IAKfH,EAAaC,EAAM,cAAeC,CAAY,EAC9CF,EAAaC,EAAM,WAAYE,CAAS,EAKxC,OAAO,QAAUF",
  "names": ["require_primitive", "__commonJSMin", "exports", "module", "NINF", "isNumber", "isNonPositiveFinite", "value", "require_object", "__commonJSMin", "exports", "module", "NINF", "isNumber", "isNonPositiveFinite", "value", "require_main", "__commonJSMin", "exports", "module", "NINF", "isPrimitive", "isObject", "isNonPositiveFinite", "value", "setReadOnly", "main", "isPrimitive", "isObject"]
}
